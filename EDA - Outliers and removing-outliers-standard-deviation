https://machinelearningmastery.com/how-to-use-statistics-to-identify-outliers-in-data/
https://www.kdnuggets.com/2017/02/removing-outliers-standard-deviation-python.html
https://www.youtube.com/watch?v=mtbJbDwqWLE


Plots 

https://datavizcatalogue.com/methods/box_plot.html

https://www.bitdegree.org/learn/train-test-split


https://scikit-learn.org/stable/modules/outlier_detection.html#isolation-forest



# split into inpiut and output elements
X, y = data[:, :-1], data[:, -1]
# split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1)
# summarize the shape of the training dataset
print(X_train.shape, y_train.shape)
# identify outliers in the training dataset
lof = LocalOutlierFactor()
yhat = lof.fit_predict(X_train)
# select all rows that are not outliers
mask = yhat != -1
X_train, y_train = X_train[mask, :], y_train[mask]
# summarize the shape of the updated training dataset
print(X_train.shape, y_train.shape)
# fit the model
model = LinearRegression()
model.fit(X_train, y_train)
# evaluate the model
yhat = model.predict(X_test)
# evaluate predictions
mae = mean_absolute_error(y_test, yhat)
print('MAE: %.3f' % mae)
